@Book{h2g2,
  author =    {Adams, Douglas},
  title =     {The Hitchhiker's Guide to the Galaxy},
  publisher = {Del Rey (reprint)},
  year =      1995,
  note =      {ISBN-13: 978-0345391803}}

@TechReport{UCAM-CL-TR-951,
  author =	 {Watson, Robert N. M. and Neumann, Peter G. and Woodruff,
          	  Jonathan and Roe, Michael and Almatary, Hesham and
          	  Anderson, Jonathan and Baldwin, John and Barnes, Graeme and
          	  Chisnall, David and Clarke, Jessica and Davis, Brooks and
          	  Eisen, Lee and Filardo, Nathaniel Wesley and Grisenthwaite,
          	  Richard and Joannou, Alexandre and Laurie, Ben and
          	  Markettos, A. Theodore and Moore, Simon W. and Murdoch,
          	  Steven J. and Nienhuis, Kyndylan and Norton, Robert and
          	  Richardson, Alexander and Rugg, Peter and Sewell, Peter and
          	  Son, Stacey and Xia, Hongyan},
  title = 	 {{Capability Hardware Enhanced RISC Instructions: CHERI
         	   Instruction-Set Architecture (Version 8)}},
  year = 	 2020,
  month = 	 oct,
  url = 	 {https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-951.pdf},
  institution =  {University of Cambridge, Computer Laboratory},
  number = 	 {UCAM-CL-TR-951}
}

@article{10.1145/3290332,
author = {Skorstengaard, Lau and Devriese, Dominique and Birkedal, Lars},
title = {StkTokens: Enforcing Well-Bracketed Control Flow and Stack Encapsulation Using Linear Capabilities},
year = {2019},
issue_date = {January 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {POPL},
url = {https://doi.org/10.1145/3290332},
doi = {10.1145/3290332},
abstract = {We propose and study StkTokens: a new calling convention that provably enforces well-bracketed control flow and local state encapsulation on a capability machine. The calling convention is based on linear capabilities: a type of capabilities that are prevented from being duplicated by the hardware. In addition to designing and formalizing this new calling convention, we also contribute a new way to formalize and prove that it effectively enforces well-bracketed control flow and local state encapsulation using what we call a fully abstract overlay semantics.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {19},
numpages = {28},
keywords = {stack frame encapsulation, secure compilation, well-bracketed control flow, fully abstract overlay semantics, capability machines, linear capabilities, fully abstract compilation}
}

@article{10.1145/3341688,
author = {Van Strydonck, Thomas and Piessens, Frank and Devriese, Dominique},
title = {Linear Capabilities for Fully Abstract Compilation of Separation-Logic-Verified Code},
year = {2019},
issue_date = {August 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {ICFP},
url = {https://doi.org/10.1145/3341688},
doi = {10.1145/3341688},
abstract = {Separation logic is a powerful program logic for the static modular verification of imperative programs. However, dynamic checking of separation logic contracts on the boundaries between verified and untrusted modules is hard, because it requires one to enforce (among other things) that outcalls from a verified to an untrusted module do not access memory resources currently owned by the verified module.  This paper proposes an approach to dynamic contract checking by relying on support for capabilities, a well-studied form of unforgeable memory pointers that enables fine-grained, efficient memory access control. More specifically, we rely on a form of capabilities called linear capabilities for which the hardware enforces that they cannot be copied.  We formalize our approach as a fully abstract compiler from a statically verified source language to an unverified target language with support for linear capabilities. The key insight behind our compiler is that memory resources described by spatial separation logic predicates can be represented at run time by linear capabilities. The compiler is separation-logic-proof-directed: it uses the separation logic proof of the source program to determine how memory accesses in the source program should be compiled to linear capability accesses in the target program.  The full abstraction property of the compiler essentially guarantees that compiled verified modules can interact with untrusted target language modules as if they were compiled from verified code as well.},
journal = {Proc. ACM Program. Lang.},
month = jul,
articleno = {84},
numpages = {29},
keywords = {capabilities, separation logic, verification, fully abstract compilation}
}

@article{Watson2015CHERIAH,
  title={CHERI: A Hybrid Capability-System Architecture for Scalable Software Compartmentalization},
  author={R. Watson and J. Woodruff and P. Neumann and S. Moore and J. Anderson and D. Chisnall and Nirav H. Dave and B. Davis and Khilan Gudka and B. Laurie and Steven J. Murdoch and R. Norton and M. Roe and S. Son and Munraj Vadera},
  journal={2015 IEEE Symposium on Security and Privacy},
  year={2015},
  pages={20-37}
}

@inproceedings{Kan2018AnEO,
  title={An Executable Operational Semantics for Rust with the Formalization of Ownership and Borrowing},
  author={Shuanglong Kan and Zhe Chen and David San{\'a}n and Shang-Wei Lin and Yang Liu},
  year={2018}
}

@inproceedings{xia_cherivoke_2019,
  title = {{{CHERIvoke}}: {{Characterising Pointer Revocation}} Using {{CHERI Capabilities}} for {{Temporal Memory Safety}}},
  shorttitle = {{{CHERIvoke}}},
  booktitle = {{{IEEE}}/{{ACM International Symposium}} on {{Microarchitecture}}},
  author = {Xia, Hongyan and Woodruff, Jonathan and Ainsworth, Sam and Filardo, Nathaniel W. and Roe, Michael and Richardson, Alexander and Rugg, Peter and Neumann, Peter G. and Moore, Simon W. and Watson, Robert N. M. and Jones, Timothy M.},
  year = {2019},
  month = oct,
  publisher = {{ACM}},
  doi = {10.1145/3352460.3358288},
}

@inproceedings{nathaniel_wesley_filardo_cornucopia_2020,
  title = {Cornucopia: {{Temporal Safety}} for {{CHERI Heaps}}},
  booktitle = {{{IEEE Symposium}} on {{Security}} and {{Privacy}}},
  author = {Nathaniel Wesley Filardo and {Brett F. Gutstein} and {Jonathan Woodruff} and {Sam Ainsworth} and {Lucian Paul-Trifu} and {Brooks Davis} and {Hongyan Xia} and {Edward Tomasz Napierala} and {Alexander Richardson} and {John Baldwin} and {David Chisnall} and {Jessica Clarke} and {Khilan Gudka} and {Alexandre Joannou} and {A. Theodore Markettos} and {Alfredo Mazzinghi} and {Robert M. Norton} and {Michael Roe} and {Peter Sewell} and {Stacey Son} and {Timothy M. Jones} and {Simon W. Moore} and {Peter G. Neumann} and {Robert N. M. Watson}},
  year = {2020},
  month = may,
  publisher = {{IEEE}},
  timestamp = {2020-05-28T08:16:03Z}
}

@InProceedings{skorstengaard:esop18,
  author    = {Lau Skorstengaard and
               Dominique Devriese and
               Lars Birkedal},
  title     = {Reasoning About a Machine with Local Capabilities - Provably Safe
               Stack and Return Pointer Management},
  booktitle = {European Symposium on Programming},
  pages     = {475--501},
  year      = {2018},
  doi       = {10.1007/978-3-319-89884-1\_17}
}

@article{georges_efficient_2021,
  title = {Efficient and Provable Local Capability Revocation Using Uninitialized Capabilities},
  author = {Georges, A{\"i}na Linn and Gu{\'e}neau, Arma{\"e}l and Van Strydonck, Thomas and Timany, Amin and Trieu, Alix and Huyghebaert, Sander and Devriese, Dominique and Birkedal, Lars},
  year = {2021},
  month = jan,
  volume = {5},
  pages = {6:1--6:30},
  doi = {10.1145/3434287},
  journal = {Proceedings of the ACM on Programming Languages},
  keywords = {capability machines,capability revocation,capability safety,CHERI,local capabilities,program logic,uninitialized capabilities,universal contracts},
  number = {POPL},
  timestamp = {2021-01-25T15:00:43Z}
}

@article{van_strydonck_linear_2019,
  title = {Linear Capabilities for Fully Abstract Compilation of Separation-Logic-Verified Code},
  author = {Van Strydonck, Thomas and Piessens, Frank and Devriese, Dominique},
  year = {2019},
  volume = {ICFP},
  journal = {Proc. ACM Program. Lang.},
  timestamp = {2019-08-05T13:26:42Z}
}

@article{skorstengaard:popl19, 
author = {Skorstengaard, Lau and Devriese, Dominique and Birkedal, Lars}, 
title = {{StkTokens}: Enforcing Well-Bracketed Control Flow and Stack Encapsulation Using Linear Capabilities}, 
year = {2019}, 
issue_date = {January 2019}, 
publisher = {Association for Computing Machinery}, 
address = {New York, NY, USA}, 
volume = {3}, 
number = {POPL}, 
doi = {10.1145/3290332}, 
journal = {Proc. ACM Program. Lang.}, 
month = jan, 
articleno = {19}, 
numpages = {28}, 
keywords = {linear capabilities, stack frame encapsulation, secure compilation, well-bracketed control flow, fully abstract compilation, fully abstract overlay semantics, capability machines} 
}
